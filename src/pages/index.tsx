import BlogPreview from "@/components/blogPreview";
import {
  GetServerSideProps,
  InferGetServerSidePropsType,
  NextPage,
} from "next";
import { Inter } from "next/font/google";
import Head from "next/head";
import { useState } from "react";
import { getBlogs } from "../../server/blogs";
import { IBlogPost } from "../types/blogType";

const inter = Inter({ subsets: ["latin"] });

const Home: NextPage = ({
  blogData,
  tags,
}: InferGetServerSidePropsType<typeof getServerSideProps>) => {
  const [filterWord, setFilterWord] = useState<string[]>([]);
  const [selectedIdx, setSelectedIdx] = useState<number[]>([]);

  const filterLabel = (tag: any, idx: number) => {
    if (selectedIdx.includes(idx)) {
      const removeSelected = selectedIdx.filter((id) => id !== idx);
      setSelectedIdx(removeSelected);
    } else {
      setSelectedIdx([...selectedIdx, idx]);
    }
  };

  return (
    <>
      <Head>
        <title>Blog Next</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="w-screen h-screen overflow-auto flex flex-col items-center bg-zinc-600 text-neutral-300">
        <div className="mt-3 text-center">
          <h1 className="text-[4rem]">Welcome to Blog</h1>
          <p className="">NextJS, Typescript, TailwindCSS </p>
        </div>

        <section className="flex flex-col items-center text-[1.15rem] mt-12">
          <div className="flex gap-3 mb-12">
            {tags.map((tag: string, idx: number) => {
              return (
                <button
                  className={`${
                    selectedIdx.includes(idx)
                      ? "label-selected hover:bg-sky-400 transition-all duration-300"
                      : "label hover:bg-sky-400 transition-all duration-300"
                  }`}
                  key={idx}
                  onClick={(e) => filterLabel(e.target, idx)}
                >
                  {tag}
                </button>
              );
            })}
          </div>

          {blogData.map((blog: IBlogPost) => {
            return (
              <div
                key={blog.id}
                className="max-w[28em] max-h-[20em] overflow-hidden mx-6 mb-6 bg-neutral-300 text-zinc-800 
                  rounded-lg cursor-pointer p-4 hover:bg-neutral-400 hover:text-neutral-300 transition-all duration-200"
              >
                <a href={blog.url} target="_blank" rel="noreferrer">
                  <BlogPreview
                    title={blog.title}
                    bodyText={blog.bodyText}
                    createdAt={blog.createdAt}
                    author={blog.author}
                    tags={blog.tags}
                  />
                </a>
              </div>
            );
          })}
        </section>
      </main>
    </>
  );
};
export default Home;

export const getServerSideProps: GetServerSideProps = async () => {
  let blogs: IBlogPost[] = await getBlogs();
  let tags: string[] = [];
  for (const blog of blogs) {
    for (const tag of blog.tags) {
      if (!tags.includes(tag)) {
        tags.push(tag);
      }
    }
  }

  return {
    props: {
      blogData: blogs,
      tags: tags,
    },
  };
};
